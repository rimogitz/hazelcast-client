{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","content/LandingPage/LandingPage.js","content/LandingPage/index.js","content/AccountPage/AccountTable.js","content/AccountPage/index.js","content/AccountPage/AccountPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","UIShell","aria-label","element","Link","to","prefix","_20_default","user_avatar_20_default","app_switcher_20_default","props","selected","triggerHref","role","href","tabIndex","LandingPage","className","Breadcrumb","noTrailingSlash","BreadcrumbItem","Tabs","Object","assign","Tab","label","Button","src","concat","process","alt","AccountTable","_ref","state","tabletitle","updateData","handlePagination","DataTable","isSortable","rows","rowsforpage","headers","render","_ref2","getHeaderProps","getBatchActionProps","sortBy","getRowProps","getSelectionProps","onInputChange","selectedRows","TableContainer","title","TableToolbar","TableToolbarContent","shouldShowBatchActions","onClick","size","kind","style","width","overflowX","Table","useZebraStyles","TableHead","TableRow","map","header","TableHeader","key","TableBody","row","id","cells","value","cell","TableCell","Pagination","backwardText","disabled","forwardText","isLastPage","itemsPerPageText","onChange","e","pageInputDisabled","pageNumberText","pageSize","pageSizes","pagesUnknown","totalItems","length","AccountPage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","startRow","endRow","page","event","nrrows","console","log","mydatapaged","slice","setState","prevState","b","dateA","DATE","dateB","comparison","_this2","apiUrl","axios","get","then","repos","mydata","data","x","forEach","toString","TYPE","K_SYMBOL","sort","compare","catch","error","response","status","request","message","AccountPage_AccountTable","React","Component","App","Fragment","components_Header","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.354089a7.chunk.js","sourcesContent":["import Header from './Header';\nexport default Header;\n","import React from 'react';\nimport {\n  Header,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n} from 'carbon-components-react/lib/components/UIShell';\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\nimport UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\nimport { Link } from 'react-router-dom';\n\nconst TutorialHeader = () => (\n  <Header aria-label=\"Carbon Tutorial\">\n    <SkipToContent />\n    <HeaderName element={Link} to=\"/\" prefix=\"\">\n      ACME\n    </HeaderName>\n    <HeaderNavigation aria-label=\"Carbon Tutorial\">\n      <HeaderMenuItem element={Link} to=\"/account\">\n        Account Info\n      </HeaderMenuItem>\n    </HeaderNavigation>\n    <HeaderGlobalBar>\n      <HeaderGlobalAction aria-label=\"Notifications\">\n        <Notification20 />\n      </HeaderGlobalAction>\n      <HeaderGlobalAction aria-label=\"User Avatar\">\n        <UserAvatar20 />\n      </HeaderGlobalAction>\n      <HeaderGlobalAction aria-label=\"App Switcher\">\n        <AppSwitcher20 />\n      </HeaderGlobalAction>\n    </HeaderGlobalBar>\n  </Header>\n);\n\nexport default TutorialHeader;\n","import React from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Tabs,\n  Tab,\n} from 'carbon-components-react';\n\nconst props = {\n  tabs: {\n    selected: 0,\n    triggerHref: '#',\n    role: 'navigation',\n  },\n  tab: {\n    href: '#',\n    role: 'presentation',\n    tabIndex: 0,\n  },\n};\n\nconst LandingPage = () => {\n  return (\n    <div className=\"bx--grid bx--grid--full-width landing-page\">\n      <div className=\"bx--row landing-page__banner\">\n        <div className=\"bx--col-lg-16\">\n          <Breadcrumb noTrailingSlash aria-label=\"Page navigation\">\n            <BreadcrumbItem>\n              <a href=\"/\">Welcome</a>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <h1 className=\"landing-page__heading\">Get your free Account</h1>\n        </div>\n      </div>\n      <div className=\"bx--row landing-page__r2\">\n        <div className=\"bx--col bx--no-gutter\">\n          <Tabs {...props.tabs} aria-label=\"Tab navigation\">\n            <Tab {...props.tab} label=\"About\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\n                    <h2 className=\"landing-page__subheading\">\n                      Free basic services\n                    </h2>\n                    <p className=\"landing-page__p\">\n                      This current account is free of charge. Add optional\n                      extras if you need them. Pay only for what you use.\n                    </p>\n                    <Button>Learn more</Button>\n                  </div>\n                  <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\n                    <img\n                      className=\"landing-page__illo\"\n                      src={`${process.env.PUBLIC_URL}/banking-home.png`}\n                      alt=\"Carbon illustration\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </Tab>\n            <Tab {...props.tab} label=\"What's included ?\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-lg-16\">\n                    Included with our free current account Free current account\n                    online.<br /> All these standard services are free of\n                    charge:\n                    <ul>\n                      <li>\n                        - A debit card for making secure, fast payments in\n                        Europe\n                      </li>\n                      <li>- Contactless payments with your card</li>\n                      <li>- Online banking on your PC and tablet</li>\n                      <li>- Mobile banking on your smartphone</li>\n                      <li>- Cash withdrawals in euro at all ATMs</li>\n                      <li>- Banking at ACME self-service terminals</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </Tab>\n            <Tab {...props.tab} label=\"PayPal\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-lg-16\">\n                    You can link your PayPal account with ACME Mobile and get a\n                    24/7 view – no matter where you are – of what you've spent\n                    and what's been paid into that account. Now that's even more\n                    all-in-one convenience.\n                  </div>\n                </div>\n              </div>\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n      <div className=\"bx--row landing-page__r3\">\n        <div className=\"bx--col-md-4 bx--col-lg-4\">\n          <h3 className=\"landing-page__label\">More information</h3>\n        </div>\n        <div className=\"bx--col-md-4 bx--col-lg-4\">Bank Card Regulations</div>\n        <div className=\"bx--col-md-4 bx--col-lg-4\">\n          General Banking Terms and Conditions\n        </div>\n        <div className=\"bx--col-md-4 bx--col-lg-4\">\n          Fee Information Document\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LandingPage;\n","import LandingPage from './LandingPage';\nexport default LandingPage;\n","import React from 'react';\nimport {\n  Pagination,\n  Button,\n  DataTable,\n  TableContainer,\n  Table,\n  TableHead,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableToolbar,\n  TableToolbarContent,\n} from 'carbon-components-react';\n\nconst AccountTable = ({ state, tabletitle, updateData, handlePagination }) => {\n  return (\n    <div>\n      <DataTable\n        isSortable={true}\n        rows={state.rowsforpage}\n        headers={state.headers}\n        render={({\n          rows,\n          headers,\n          getHeaderProps,\n          sortBy,\n          getRowProps,\n          getSelectionProps,\n          getBatchActionProps,\n          onInputChange,\n          selectedRows,\n        }) => (\n          <TableContainer title={tabletitle}>\n            <TableToolbar>\n              <TableToolbarContent>\n                <Button\n                  tabIndex={\n                    getBatchActionProps().shouldShowBatchActions ? -1 : 0\n                  }\n                  onClick={() => updateData()}\n                  size=\"small\"\n                  kind=\"primary\">\n                  Refresh\n                </Button>\n              </TableToolbarContent>\n            </TableToolbar>\n            <div style={{width: \"100%\", overflowX: \"auto\"}}>\n              <Table useZebraStyles className=\"bx--data-table--short\">\n                <TableHead>\n                  <TableRow>\n                    {headers.map(header => (\n                      <TableHeader\n                        key={header.key}\n                        {...getHeaderProps({ header })}>\n                        {header.header}\n                      </TableHeader>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map(row => (\n                    <TableRow\n                      key={row.id}\n                      className={\n                        row.cells[1].value === 'CR' ? 'credit' : 'deposit'\n                      }>\n                      {row.cells.map(cell => (\n                        <TableCell key={cell.id}>{cell.value}</TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </TableContainer>\n        )}\n      />\n      <Pagination\n        backwardText=\"Previous page\"\n        disabled={false}\n        forwardText=\"Next page\"\n        isLastPage={false}\n        itemsPerPageText=\"Items per page:\"\n        onChange={e => handlePagination(e)}\n        pageInputDisabled={false}\n        pageNumberText=\"Page Number\"\n        pageSize={state.pageSize}\n        pageSizes={state.pageSizes}\n        pagesUnknown={false}\n        totalItems={state.rows.length}\n      />\n    </div>\n  );\n};\n\nexport default AccountTable;\n","import AccountPage from './AccountPage';\nexport default AccountPage;\n","import React from 'react';\nimport AccountTable from './AccountTable';\nimport axios from 'axios';\n\nclass AccountPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateData = this.updateData.bind(this);\n    this.handlePagination = this.handlePagination.bind(this);\n    this.state = {\n      // The headers define which columns we'll show in the DataTable.\n      headers: [\n        {\n          key: 'DATE',\n          header: 'DATE',\n        },\n        {\n          key: 'TYPE',\n          header: 'TYPE',\n        },\n        {\n          key: 'TRANS_ID',\n          header: 'TRANS_ID',\n        },\n        {\n          key: 'ACCOUNT_ID',\n          header: 'ACCOUNT_ID',\n        },\n        {\n          key: 'AMOUNT',\n          header: 'AMOUNT',\n        },\n        {\n          key: 'BALANCE',\n          header: 'BALANCE',\n        },\n        {\n          key: 'OPERATION',\n          header: 'OPERATION'\n        },\n        {\n          key: 'K_SYMBOL',\n          header: 'COMMENT',\n        },\n        {\n          key: 'REPLICATION_TIME',\n          header: 'REPL TIME',\n        },\n        {\n          key: 'INGEST_TIME',\n          header: 'INGEST TIME',\n        }\n      ],\n      rows: [],\n      rowsforpage: [],\n      startRow: 0,\n      endRow: 10,\n      page: 1,\n      pageSize: 10,\n      pageSizes: [10, 20, 50],\n    };\n  }\n\n  tabletitle = 'My Transactions';\n\n  // Method called when invoking one of the pagination elements below the table\n  handlePagination(event) {\n    // info coming from the paging control\n    const { page, pageSize } = event;\n    if (page && pageSize) {\n      // Let's print the incoming numbers for debugging purposes.\n      var nrrows = this.state.rows.length;\n      console.log('Page = ' + page);\n      console.log('Pagesize = ' + pageSize);\n      console.log('Number of rows = ' + nrrows);\n\n      // Calculate start and end row based on input\n      var startRow = (page - 1) * pageSize;\n      var endRow = startRow + pageSize;\n      // Cut it off at the end\n      if (endRow > nrrows) endRow = nrrows;\n\n      // Print the results for debugging purposes\n      console.log('Startrow = ' + startRow);\n      console.log('Endrow = ' + endRow);\n\n      // Now get the rows we need by slicing the full data set\n      console.log('This is the full data : ', this.state.rows);\n      var mydatapaged = this.state.rows.slice(startRow, endRow);\n      console.log('This is the paged data : ', mydatapaged);\n\n      // And finally update the state (which will re-render the component)\n      this.setState((prevState, props) => {\n        return {\n          page,\n          pageSize,\n          startRow,\n          endRow,\n          rowsforpage: mydatapaged,\n        };\n      });\n    }\n  }\n\n  // Helper function to sort the data on the \"date\" attribute\n  compare(a, b) {\n    const dateA = a.DATE;\n    const dateB = b.DATE;\n\n    let comparison = 0;\n    if (dateA > dateB) {\n      comparison = -1;\n    } else if (dateA < dateB) {\n      comparison = 1;\n    }\n    return comparison;\n  }\n\n  updateData() {\n    // Get the data from Hazelcast\n\n    // Get all the transactions from a single account (account is set in the quarkus project via env.)\n    // FYI : in dev mode, the package.json has a proxy defined to allow to connect\n    // to another port. In this case 8080 where the quarkus client is running.\n    let apiUrl = '/transaction/getByClient';\n    console.log('Connecting to ' + apiUrl);\n\n    // Connect using the axios library.\n    // For now we get the full data set in one go.\n    // If this becomes too big, we'll need to add start and end info based on the pagination\n    axios\n      .get(apiUrl)\n      .then(repos => {\n        var mydata = repos.data;\n        var x = 0;\n\n        // Data manipulation\n        mydata.forEach(function(row) {\n          console.log(row);\n          // We need a property called \"id\" for the Carbon DataTable, so adding it here\n          row.id = x.toString();\n          // Shorten the type value\n          if(row.TYPE === \"CREDIT\") row.TYPE = \"CR\";\n          if(row.TYPE === \"WITHDRAWAL\") row.TYPE = \"WD\";\n          if(row.K_SYMBOL === \"null\") row.K_SYMBOL = \"\";\n          x = x + 1;\n        });\n\n        // Now sort it by date\n        mydata.sort(this.compare);\n        console.log('This is your sorted data ', mydata);\n\n        // Now set it up for pagination based on the component state\n        var mydatapaged = mydata.slice(this.state.startRow, this.state.endRow);\n\n        this.setState((prevState, props) => {\n          return { rows: mydata, rowsforpage: mydatapaged };\n        });\n      })\n      .catch(function(error) {\n        if (error.response) {\n          // Request made and server responded\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          console.log(error.request);\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log('Error', error.message);\n        }\n      });\n  }\n\n  componentDidMount() {\n    this.updateData();\n  }\n\n  render() {\n    return (\n      <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter account-page\">\n        <div className=\"bx--row account-page__r1\">\n          <div className=\"accounttable bx--col-lg-16\">\n            <AccountTable\n              state={this.state}\n              tabletitle={this.tabletitle}\n              updateData={this.updateData}\n              handlePagination={this.handlePagination}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AccountPage;\n","import React, { Component } from 'react';\nimport './app.scss';\nimport { Content } from 'carbon-components-react/lib/components/UIShell';\nimport Header from './components/Header';\nimport { Route, Switch } from 'react-router-dom';\nimport LandingPage from './content/LandingPage';\nimport AccountPage from './content/AccountPage';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <Content>\n          <Switch>\n            <Route exact path=\"/\" component={LandingPage} />\n            <Route path=\"/account\" component={AccountPage} />\n          </Switch>\n        </Content>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js/modules/es7.array.includes';\nimport 'core-js/modules/es6.array.fill';\nimport 'core-js/modules/es6.string.includes';\nimport 'core-js/modules/es6.string.trim';\nimport 'core-js/modules/es7.object.values';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}