{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","content/LandingPage/LandingPage.js","content/LandingPage/index.js","content/AccountPage/AccountTable.js","content/AccountPage/index.js","content/AccountPage/AccountPage.js","content/TechPage/index.js","content/TechPage/TechPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","TutorialHeader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","logourl","_this2","console","log","axios","get","then","repos","mydata","data","setState","prevState","catch","error","response","status","headers","request","message","updateData","react_default","a","createElement","UIShell","aria-label","element","Link","to","prefix","className","src","alt","_20_default","user_avatar_20_default","app_switcher_20_default","React","Component","selected","triggerHref","role","href","tabIndex","LandingPage","Breadcrumb","noTrailingSlash","BreadcrumbItem","Tabs","assign","Tab","label","Button","concat","process","AccountTable","_ref","tabletitle","handlePagination","DataTable","isSortable","rows","rowsforpage","render","_ref2","getHeaderProps","getBatchActionProps","sortBy","getRowProps","getSelectionProps","onInputChange","selectedRows","TableContainer","title","TableToolbar","TableToolbarContent","shouldShowBatchActions","onClick","size","kind","style","width","overflowX","Table","useZebraStyles","TableHead","TableRow","map","header","TableHeader","key","TableBody","row","id","cells","value","cell","TableCell","Pagination","backwardText","disabled","forwardText","isLastPage","itemsPerPageText","onChange","e","pageInputDisabled","pageNumberText","pageSize","pageSizes","pagesUnknown","totalItems","length","AccountPage","bind","assertThisInitialized","startRow","endRow","page","event","nrrows","mydatapaged","slice","b","dateA","DATE","dateB","comparison","rowA","ROW","rowB","apiUrl","x","sort","compare2","forEach","toString","TYPE","K_SYMBOL","date","Date","substring","toDateString","date2","INGEST_TIME","toUTCString","AccountPage_AccountTable","TechPage","_this3","_this4","clearMaps","StructuredList","head","noWrap","mapname","mapcount","mapsample","App","Fragment","components_Header","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb4241c4.chunk.js","sourcesContent":["import Header from './Header';\nexport default Header;\n","import React from 'react';\nimport {\n  Header,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n} from 'carbon-components-react/lib/components/UIShell';\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\nimport UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass TutorialHeader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      logourl : 'https://dwglogo.com/wp-content/uploads/2016/05/IBM_logo.png'\n    }\n  }\n\n\n  updateData() {\n    let apiUrl = '/ui/getlogourl';\n    console.log('Connecting to ' + apiUrl);\n\n    // Connect using the axios library.\n    // For now we get the full data set in one go.\n    // If this becomes too big, we'll need to add start and end info based on the pagination\n    axios\n      .get(apiUrl)\n      .then(repos => {\n        var mydata = repos.data;\n        console.log(\"LogoURL = \" + mydata.logourl);\n\n        this.setState((prevState, props) => {\n          return { logourl: mydata.logourl };\n        });\n      })\n      .catch(function(error) {\n        if (error.response) {\n          // Request made and server responded\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          console.log(error.request);\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log('Error', error.message);\n        }\n      });\n  }\n\n  componentDidMount() {\n    this.updateData();\n  }\n\n  render() {\n    return (\n      <Header aria-label=\"Carbon Tutorial\">\n      <SkipToContent />\n      <HeaderName element={Link} to=\"/\" prefix=\"\">\n        <div className=\"cpylogodiv\">\n          <img\n            className=\"cpylogo\"\n            src={this.state.logourl}\n            alt=\"company logo\"\n          />\n        </div>\n      </HeaderName>\n      <HeaderNavigation aria-label=\"ACME Demo\">\n      <HeaderMenuItem element={Link} to=\"/account\">\n          Account Info\n        </HeaderMenuItem>\n        <HeaderMenuItem element={Link} to=\"/tech\">\n          Tech Info\n        </HeaderMenuItem>\n      </HeaderNavigation>\n      <HeaderGlobalBar>\n        <HeaderGlobalAction aria-label=\"Notifications\">\n          <Notification20 />\n        </HeaderGlobalAction>\n        <HeaderGlobalAction aria-label=\"User Avatar\">\n          <UserAvatar20 />\n        </HeaderGlobalAction>\n        <HeaderGlobalAction aria-label=\"App Switcher\">\n          <AppSwitcher20 />\n        </HeaderGlobalAction>\n      </HeaderGlobalBar>\n    </Header>\n    );\n  }\n}\n\n\nexport default TutorialHeader;\n","import React from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Tabs,\n  Tab,\n} from 'carbon-components-react';\n\nconst props = {\n  tabs: {\n    selected: 0,\n    triggerHref: '#',\n    role: 'navigation',\n  },\n  tab: {\n    href: '#',\n    role: 'presentation',\n    tabIndex: 0,\n  },\n};\n\nconst LandingPage = () => {\n  return (\n    <div className=\"bx--grid bx--grid--full-width landing-page\">\n      <div className=\"bx--row landing-page__banner\">\n        <div className=\"bx--col-lg-16\">\n          <Breadcrumb noTrailingSlash aria-label=\"Page navigation\">\n            <BreadcrumbItem>\n              <a href=\"/\">Welcome</a>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <h1 className=\"landing-page__heading\">Get your free Account</h1>\n        </div>\n      </div>\n      <div className=\"bx--row landing-page__r2\">\n        <div className=\"bx--col bx--no-gutter\">\n          <Tabs {...props.tabs} aria-label=\"Tab navigation\">\n            <Tab {...props.tab} label=\"About\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\n                    <h2 className=\"landing-page__subheading\">\n                      Free basic services\n                    </h2>\n                    <p className=\"landing-page__p\">\n                      This current account is free of charge. Add optional\n                      extras if you need them. Pay only for what you use.\n                    </p>\n                    <Button>Learn more</Button>\n                  </div>\n                  <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\n                    <img\n                      className=\"landing-page__illo\"\n                      src={`${process.env.PUBLIC_URL}/banking-home.png`}\n                      alt=\"Carbon illustration\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </Tab>\n            <Tab {...props.tab} label=\"What's included ?\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-lg-16\">\n                    Included with our free current account Free current account\n                    online.<br /> All these standard services are free of\n                    charge:\n                    <ul>\n                      <li>\n                        - A debit card for making secure, fast payments in\n                        Europe\n                      </li>\n                      <li>- Contactless payments with your card</li>\n                      <li>- Online banking on your PC and tablet</li>\n                      <li>- Mobile banking on your smartphone</li>\n                      <li>- Cash withdrawals in euro at all ATMs</li>\n                      <li>- Banking at ACME self-service terminals</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </Tab>\n            <Tab {...props.tab} label=\"PayPal\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-lg-16\">\n                    You can link your PayPal account with ACME Mobile and get a\n                    24/7 view – no matter where you are – of what you've spent\n                    and what's been paid into that account. Now that's even more\n                    all-in-one convenience.\n                  </div>\n                </div>\n              </div>\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n      <div className=\"bx--row landing-page__r3\">\n        <div className=\"bx--col-md-4 bx--col-lg-4\">\n          <h3 className=\"landing-page__label\">More information</h3>\n        </div>\n        <div className=\"bx--col-md-4 bx--col-lg-4\">Bank Card Regulations</div>\n        <div className=\"bx--col-md-4 bx--col-lg-4\">\n          General Banking Terms and Conditions\n        </div>\n        <div className=\"bx--col-md-4 bx--col-lg-4\">\n          Fee Information Document\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LandingPage;\n","import LandingPage from './LandingPage';\nexport default LandingPage;\n","import React from 'react';\nimport {\n  Pagination,\n  Button,\n  DataTable,\n  TableContainer,\n  Table,\n  TableHead,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableToolbar,\n  TableToolbarContent,\n} from 'carbon-components-react';\n\nconst AccountTable = ({ state, tabletitle, updateData, handlePagination }) => {\n  return (\n    <div>\n      <DataTable\n        isSortable={true}\n        rows={state.rowsforpage}\n        headers={state.headers}\n        render={({\n          rows,\n          headers,\n          getHeaderProps,\n          sortBy,\n          getRowProps,\n          getSelectionProps,\n          getBatchActionProps,\n          onInputChange,\n          selectedRows,\n        }) => (\n          <TableContainer title={tabletitle}>\n            <TableToolbar>\n              <TableToolbarContent>\n                <Button\n                  tabIndex={\n                    getBatchActionProps().shouldShowBatchActions ? -1 : 0\n                  }\n                  onClick={() => updateData()}\n                  size=\"small\"\n                  kind=\"primary\">\n                  Refresh\n                </Button>\n              </TableToolbarContent>\n            </TableToolbar>\n            <div style={{width: \"100%\", overflowX: \"auto\"}}>\n              <Table useZebraStyles className=\"bx--data-table--short\">\n                <TableHead>\n                  <TableRow>\n                    {headers.map(header => (\n                      <TableHeader\n                        key={header.key}\n                        {...getHeaderProps({ header })}>\n                        {header.header}\n                      </TableHeader>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map(row => (\n                    <TableRow\n                      key={row.id}\n                      className={\n                        row.cells[4].value === 'CR' ? 'credit' : 'deposit'\n                      }>\n                      {row.cells.map(cell => (\n                        <TableCell key={cell.id}>{cell.value}</TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </TableContainer>\n        )}\n      />\n      <Pagination\n        backwardText=\"Previous page\"\n        disabled={false}\n        forwardText=\"Next page\"\n        isLastPage={false}\n        itemsPerPageText=\"Items per page:\"\n        onChange={e => handlePagination(e)}\n        pageInputDisabled={false}\n        pageNumberText=\"Page Number\"\n        pageSize={state.pageSize}\n        pageSizes={state.pageSizes}\n        pagesUnknown={false}\n        totalItems={state.rows.length}\n      />\n    </div>\n  );\n};\n\nexport default AccountTable;\n","import AccountPage from './AccountPage';\nexport default AccountPage;\n","import React from 'react';\nimport AccountTable from './AccountTable';\nimport axios from 'axios';\n\nclass AccountPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateData = this.updateData.bind(this);\n    this.handlePagination = this.handlePagination.bind(this);\n    this.state = {\n      // The headers define which columns we'll show in the DataTable.\n      headers: [\n        {\n          key: 'DATE',\n          header: 'DATE',\n        },\n        {\n          key: 'ROW',\n          header: 'ROW',\n        },\n        {\n          key: 'TRANS_ID',\n          header: 'TRANS_ID',\n        },\n        {\n          key: 'CLIENT_ID',\n          header: 'CLIENT_ID',\n        },\n        {\n          key: 'TYPE',\n          header: 'TYPE',\n        },\n        {\n          key: 'AMOUNT',\n          header: 'AMOUNT',\n        },\n        {\n          key: 'BALANCE',\n          header: 'BALANCE',\n        },\n        {\n          key: 'OPERATION',\n          header: 'OPERATION'\n        },\n        {\n          key: 'K_SYMBOL',\n          header: 'COMMENT',\n        },\n        {\n          key: 'REPLICATION_TIME',\n          header: 'REPL TIME',\n        },\n        {\n          key: 'INGEST_TIME',\n          header: 'INGEST TIME',\n        }\n      ],\n      rows: [],\n      rowsforpage: [],\n      startRow: 0,\n      endRow: 10,\n      page: 1,\n      pageSize: 10,\n      pageSizes: [10, 20, 50],\n    };\n  }\n\n  tabletitle = 'My Transactions';\n\n  // Method called when invoking one of the pagination elements below the table\n  handlePagination(event) {\n    // info coming from the paging control\n    const { page, pageSize } = event;\n    if (page && pageSize) {\n      // Let's print the incoming numbers for debugging purposes.\n      var nrrows = this.state.rows.length;\n      console.log('Page = ' + page);\n      console.log('Pagesize = ' + pageSize);\n      console.log('Number of rows = ' + nrrows);\n\n      // Calculate start and end row based on input\n      var startRow = (page - 1) * pageSize;\n      var endRow = startRow + pageSize;\n      // Cut it off at the end\n      if (endRow > nrrows) endRow = nrrows;\n\n      // Print the results for debugging purposes\n      console.log('Startrow = ' + startRow);\n      console.log('Endrow = ' + endRow);\n\n      // Now get the rows we need by slicing the full data set\n      console.log('This is the full data : ', this.state.rows);\n      var mydatapaged = this.state.rows.slice(startRow, endRow);\n      console.log('This is the paged data : ', mydatapaged);\n\n      // And finally update the state (which will re-render the component)\n      this.setState((prevState, props) => {\n        return {\n          page,\n          pageSize,\n          startRow,\n          endRow,\n          rowsforpage: mydatapaged,\n        };\n      });\n    }\n  }\n\n  // Helper function to sort the data on the \"date\" attribute\n  compare(a, b) {\n    const dateA = a.DATE;\n    const dateB = b.DATE;\n\n    let comparison = 0;\n    if (dateA > dateB) {\n      comparison = -1;\n    } else if (dateA < dateB) {\n      comparison = 1;\n    }\n    return comparison;\n  }\n\n  // Helper function to sort the data on the \"row\" attribute\n  compare2(a, b) {\n    const rowA = a.ROW;\n    const rowB = b.ROW;\n\n    let comparison = 0;\n    if (rowA > rowB) {\n      comparison = -1;\n    } else if (rowA < rowB) {\n      comparison = 1;\n    }\n    return comparison;\n  }\n\n  updateData() {\n    // Get the data from Hazelcast\n\n    // Get all the transactions from a single account (account is set in the quarkus project via env.)\n    // FYI : in dev mode, the package.json has a proxy defined to allow to connect\n    // to another port. In this case 8080 where the quarkus client is running.\n    let apiUrl = '/transaction/getByAccount';\n    console.log('Connecting to ' + apiUrl);\n\n    // Connect using the axios library.\n    // For now we get the full data set in one go.\n    // If this becomes too big, we'll need to add start and end info based on the pagination\n    axios\n      .get(apiUrl)\n      .then(repos => {\n        var mydata = repos.data;\n        var x = 0;\n\n        // Now sort it by date\n        mydata.sort(this.compare2);\n        console.log('This is your sorted data ', mydata);\n\n        // Data manipulation\n        mydata.forEach(function(row) {\n          console.log(row);\n          // We need a property called \"id\" for the Carbon DataTable, so adding it here\n          row.id = x.toString();\n          // Shorten the type value\n          if(row.TYPE === \"CREDIT\") row.TYPE = \"CR\";\n          if(row.TYPE === \"WITHDRAWAL\") row.TYPE = \"WD\";\n          if(row.K_SYMBOL === \"null\") row.K_SYMBOL = \"\";\n\n          // convert the date\n          var date = new Date(row.DATE.substring(0,4),row.DATE.substring(4,5),row.DATE.substring(5,6));\n          row.DATE = date.toDateString()\n\n          // Convert the ingest time property\n          var date2 = new Date(row.INGEST_TIME);\n          row.INGEST_TIME = date2.toUTCString();\n          x = x + 1;\n        });\n\n\n        // Now set it up for pagination based on the component state\n        var mydatapaged = mydata.slice(this.state.startRow, this.state.endRow);\n\n        this.setState((prevState, props) => {\n          return { rows: mydata, rowsforpage: mydatapaged };\n        });\n      })\n      .catch(function(error) {\n        if (error.response) {\n          // Request made and server responded\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          console.log(error.request);\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log('Error', error.message);\n        }\n      });\n  }\n\n  componentDidMount() {\n    this.updateData();\n  }\n\n  render() {\n    return (\n      <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter account-page\">\n        <div className=\"bx--row account-page__r1\">\n          <div className=\"accounttable bx--col-lg-16\">\n            <AccountTable\n              state={this.state}\n              tabletitle={this.tabletitle}\n              updateData={this.updateData}\n              handlePagination={this.handlePagination}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AccountPage;\n","import TechPage from './TechPage';\nexport default TechPage;\n","import React from 'react';\nimport axios from 'axios';\nimport {\n  Button,\n  StructuredListWrapper,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListRow,\n  StructuredListCell,\n} from 'carbon-components-react';\n\nclass TechPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [],\n    };\n  }\n\n  clearMaps() {\n    // Call the clear map api\n    let apiUrl = '/techinfo/clearmaps';\n    console.log('Connecting to ' + apiUrl);\n\n    // Connect using the axios library.\n    // For now we get the full data set in one go.\n    // If this becomes too big, we'll need to add start and end info based on the pagination\n    axios\n      .get(apiUrl)\n      .then(repos => {\n        var mydata = repos.data;\n\n        console.log('Incoming data ', mydata);\n\n        // finally refresh\n        this.updateData();\n      })\n      .catch(function(error) {\n        if (error.response) {\n          // Request made and server responded\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          console.log(error.request);\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log('Error', error.message);\n        }\n      });\n  }\n\n  updateData() {\n    // Get the data from Hazelcast\n    let apiUrl = '/techinfo/getoverview';\n    console.log('Connecting to ' + apiUrl);\n\n    // Connect using the axios library.\n    // For now we get the full data set in one go.\n    // If this becomes too big, we'll need to add start and end info based on the pagination\n    axios\n      .get(apiUrl)\n      .then(repos => {\n        var mydata = repos.data;\n\n        console.log('Incoming data ', mydata);\n\n        this.setState((prevState, props) => {\n          return { rows: mydata };\n        });\n      })\n      .catch(function(error) {\n        if (error.response) {\n          // Request made and server responded\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          console.log(error.request);\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log('Error', error.message);\n        }\n      });\n  }\n\n  componentDidMount() {\n    this.updateData();\n  }\n\n  render() {\n    return (\n      <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter account-page\">\n        <div className=\"bx--row account-page__r1\">\n          <div className=\"bx--col-lg-16 techtable\">\n            <div className=\"bx--data-table-header\">\n              <h4 className=\"bx--data-table-header__title\">\n                Hazelcast IMDG Info\n              </h4>\n            </div>\n          </div>\n          <div className=\"bx--col-lg-16 techtable\">\n            <div className=\"refreshbutton\">\n              <Button onClick={() => this.updateData()}>Refresh</Button>\n              <Button kind=\"danger\" onClick={() => this.clearMaps()}>\n                Clear Maps\n              </Button>\n            </div>\n          </div>\n          <div className=\"bx--col-lg-16\">\n            <StructuredListWrapper>\n              <StructuredListHead>\n                <StructuredListRow head>\n                  <StructuredListCell head>Map Name</StructuredListCell>\n                  <StructuredListCell head>Map Size</StructuredListCell>\n                  <StructuredListCell head>Sample Content</StructuredListCell>\n                </StructuredListRow>\n              </StructuredListHead>\n              <StructuredListBody>\n                {this.state.rows.map(row => (\n                  <StructuredListRow key={row.id}>\n                    <StructuredListCell noWrap>\n                      {row.mapname}\n                    </StructuredListCell>\n                    <StructuredListCell>{row.mapcount}</StructuredListCell>\n                    <StructuredListCell>{row.mapsample}</StructuredListCell>\n                  </StructuredListRow>\n                ))}\n              </StructuredListBody>\n            </StructuredListWrapper>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TechPage;\n","import React, { Component } from 'react';\nimport './app.scss';\nimport { Content } from 'carbon-components-react/lib/components/UIShell';\nimport Header from './components/Header';\nimport { Route, Switch } from 'react-router-dom';\nimport LandingPage from './content/LandingPage';\nimport AccountPage from './content/AccountPage';\nimport TechPage from './content/TechPage';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <Content>\n          <Switch>\n            <Route exact path=\"/\" component={LandingPage} />\n            <Route path=\"/account\" component={AccountPage} />\n            <Route path=\"/tech\" component={TechPage} />\n          </Switch>\n        </Content>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js/modules/es7.array.includes';\nimport 'core-js/modules/es6.array.fill';\nimport 'core-js/modules/es6.string.includes';\nimport 'core-js/modules/es6.string.trim';\nimport 'core-js/modules/es7.object.values';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}